name: ci 
run-name: CI - ${{ github.event.head_commit.message }}

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true
  
env:
  IMAGE_NAME: "${{ secrets.APP_ECS_CONTAINER_IMAGE }}:${{ github.sha }}"

  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  TF_ROOT: ./ecs
  TF_LINT_VERSION: v0.44.1

  TF_VAR_app_ecs_task_container_image: "${{ secrets.APP_ECS_CONTAINER_IMAGE }}:${{ github.sha }}"
  TF_VAR_app_ecs_container_registry_username: ${{ secrets.APP_ECS_CONTAINER_REGISTRY_USERNAME }}  
  TF_VAR_app_ecs_container_registry_password: ${{ secrets.APP_ECS_CONTAINER_REGISTRY_PASSWORD }}  
  
permissions:
  contents: read

jobs:
  python-unit-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
        cache: 'pip'
    - name: Install dependencies
      working-directory: ./app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
    - name: Test with pytest
      working-directory: ./app
      run: |
        pytest --junitxml=junit/test-results.xml .        
  
  python-lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
        cache: 'pip'
    - name: Install dependencies
      working-directory: ./app    
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
    - name: Run pylint
      working-directory: ./app
      run: |
        pylint **/*.py --fail-under=8  

  python-type-checks:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
        cache: 'pip'
    - name: Install dependencies
      working-directory: ./app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
    - name: Run type checks
      working-directory: ./app
      run: |
        mypy .
        
  python-safety-checks:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
        cache: 'pip'
    - name: Install dependencies
      working-directory: ./app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
    - name: Run python safety checks
      working-directory: ./app
      run: |
        safety check -r requirements.txt           

  docker-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Run Docker linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./app/Dockerfile   

  docker-security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image from Dockerfile
        working-directory: ./app
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}'
          format: 'table'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

  push-image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    needs: 
    - python-unit-test
    - python-lint
    - python-type-checks
    - python-safety-checks
    - docker-lint
    - docker-security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
            
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: ${{ env.IMAGE_NAME }}          

  terraform-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - uses: hashicorp/setup-terraform@v2

    - name: Format check
      run: terraform fmt -check
      working-directory: ${{ env.TF_ROOT }}   

  terraform-lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3

      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v3
      name: Setup TFLint
      with:
        tflint_version: ${{ env.TF_LINT_VERSION }}
        github_token:  ${{ secrets.GITHUB_TOKEN }}
        
    - name: Show version
      run: tflint --version
      working-directory: ${{ env.TF_ROOT }}        

    - name: Init TFLint
      run: tflint --init
      working-directory: ${{ env.TF_ROOT }}

    - name: Run TFLint
      run: tflint -f compact
      working-directory: ${{ env.TF_ROOT }}

  terraform-validate-and-plan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init    
      working-directory: ${{ env.TF_ROOT }}   

    - name: Terraform Validate
      run: terraform validate -no-color
      working-directory: ${{ env.TF_ROOT }}   
      
    - name: Terraform plan
      run: terraform plan -no-color -input=false
      working-directory: ${{ env.TF_ROOT }}   

  terraform-compute-costs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      # See https://github.com/infracost/actions/tree/master/setup for other inputs
      # If you can't use this action, see Docker images in https://infracost.io/cicd
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost cost estimate baseline
      run:  infracost breakdown --path=${{env.TF_ROOT}}     

  terraform-security-review:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working-directory: ${{ env.TF_ROOT }}

